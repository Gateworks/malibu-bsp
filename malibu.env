#
# U-Boot environment for Gateworks Malibu
#

# misc config
bootdelay=5
baudrate=115200
bootargs=cma=128M
preboot=gsc wd-disable; gsc thermal enable 96
PS1=Malibu>> 

# configure addrs friendly for 1GiB min DRAM allowing 128MB of kernel
loadaddr=0x8200000
kernel_addr_r=0x8200000
fdt_addr_r=0x10200000
scriptaddr=0x10280000
ramdisk_addr_r=0x10300000

# generic distro config
bootcmd=run distro_bootcmd
distro_bootcmd=\
	setenv nvme_need_init; \
	for target in ${boot_targets}; do \
		run bootcmd_${target}; \
	done
boot_a_script=\
	load ${devtype} ${devnum}:${distro_bootpart} ${scriptaddr} ${prefix}${script}; \
	source ${scriptaddr}
boot_efi_binary=\
	load ${devtype} ${devnum}:${distro_bootpart} ${kernel_addr_r} efi/boot/bootaa64.efi; \
	if fdt addr -q ${fdt_addr_r}; then \
		bootefi ${kernel_addr_r} ${fdt_addr_r}; \
	else \
		bootefi ${kernel_addr_r} ${fdtcontroladdr}; \
	fi
boot_efi_bootmgr=\
	if fdt addr -q ${fdt_addr_r}; then \
		bootefi bootmgr ${fdt_addr_r};\
	else bootefi bootmgr;\
	fi
scan_dev_for_boot=\
	echo Scanning ${devtype} ${devnum}:${distro_bootpart}...; \
	for prefix in ${boot_prefixes}; do \
		run scan_dev_for_extlinux; \
		run scan_dev_for_scripts; \
	done;\
	run scan_dev_for_efi;
scan_dev_for_boot_part=\
	part list ${devtype} ${devnum} -bootable devplist; \
	env exists devplist || setenv devplist 1; \
	for distro_bootpart in ${devplist}; do \
		if fstype ${devtype} ${devnum}:${distro_bootpart} bootfstype; then \
			run scan_dev_for_boot; \
		fi; \
	done; \
	setenv devplist
scan_dev_for_efi=\
	setenv efi_fdtfile ${fdtfile}; \
	for prefix in ${efi_dtb_prefixes}; do \
		if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${efi_fdtfile}; then \
			run load_efi_dtb; \
		fi; \
	done;\
	run boot_efi_bootmgr;\
	if test -e ${devtype} ${devnum}:${distro_bootpart} efi/boot/bootaa64.efi; then \
		echo Found EFI removable media binary efi/boot/bootaa64.efi; \
		run boot_efi_binary; \
		echo EFI LOAD FAILED: continuing...; \
	fi; \
	setenv efi_fdtfile
scan_dev_for_scripts=\
	for script in ${boot_scripts}; do \
		if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${script}; \
		then echo Found U-Boot script ${prefix}${script}; run boot_a_script; echo SCRIPT FAILED: continuing...; \
		fi; \
	done
# list of boot targets searched
boot_targets=mmc1 mmc0 usb0 usb1 pxe dhcp
# list of dirs within a partition that are searched for for boot scripts
boot_prefixes=/ /boot/
# list of boot script filenames to search for
boot_scripts=boot.scr.uimg boot.scr
# DHCP
boot_script_dhcp=boot.scr.uimg
# PXE
boot_net_usb_start=usb start
boot_pci_enum=pci enum
bootcmd_pxe=\
	run boot_net_usb_start; run boot_pci_enum; dhcp; \
	if pxe get; then \
		pxe boot; \
	fi
bootcmd_dhcp=\
	devtype=dhcp; \
	run boot_net_usb_start; \
	run boot_pci_enum; \
	if dhcp ${scriptaddr} ${boot_script_dhcp}; then \
		source ${scriptaddr}; \
	fi; \
	setenv efi_fdtfile ${fdtfile}; \
	setenv efi_old_vci ${bootp_vci}; \
	setenv efi_old_arch ${bootp_arch}; \
	setenv bootp_vci PXEClient:Arch:00011:UNDI:003000; \
	setenv bootp_arch 0xb; \
	if dhcp ${kernel_addr_r}; then \
		tftpboot ${fdt_addr_r} dtb/${efi_fdtfile}; \
		if fdt addr -q ${fdt_addr_r}; then \
			bootefi ${kernel_addr_r} ${fdt_addr_r}; \
		else bootefi ${kernel_addr_r} ${fdtcontroladdr}; \
		fi; \
	fi; \
	setenv bootp_vci ${efi_old_vci}; \
	setenv bootp_arch ${efi_old_arch}; \
	setenv efi_fdtfile; \
	setenv efi_old_arch; \
	setenv efi_old_vci;
# MMC
mmc_boot=\
	if mmc dev ${devnum}; then \
		devtype=mmc; run scan_dev_for_boot_part; \
	fi
bootcmd_mmc0=devnum=0; run mmc_boot
bootcmd_mmc1=devnum=1; run mmc_boot
# USB
bootcmd_usb0=devnum=0; run usb_boot
bootcmd_usb1=devnum=1; run usb_boot
# NVME
nvme_init=\
	if ${nvme_need_init}; then \
		setenv nvme_need_init false; nvme scan; \
	fi
nvme_boot=\
	run boot_pci_enum; run nvme_init; \
	if nvme dev ${devnum}; then \
		devtype=nvme; run scan_dev_for_boot_part; \
	fi
# syslinux
scan_dev_for_extlinux=\
	if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${boot_syslinux_conf}; then \
		echo Found ${prefix}${boot_syslinux_conf}; \
		run boot_extlinux; \
		echo SCRIPT FAILED: continuing...; \
	fi
boot_extlinux=\
	sysboot ${devtype} ${devnum}:${distro_bootpart} any ${scriptaddr} ${prefix}${boot_syslinux_conf}
boot_syslinux_conf=extlinux/extlinux.conf

# Firmware Update helpers (set dev/image prior to calling)
board=gw8901
dev=0
dir=malibu/
ipaddr=192.168.1.1
serverip=192.168.1.146
ethrotate=no
ethact=eth1
autoload=no
# update boot firmare of $dev with $image (flash.bin)
# this updates both emmc boot0:LBA0 and boot1:LBA0
firmware_image=${dir}/firmware-malibu-${board}.bin
update_firmware=\
  tftpboot $loadaddr $firmware_image && \
  setexpr blkcnt $filesize + 0x1ff && setexpr blkcnt $blkcnt / 0x200 && \
  mmc dev 0 1 && mmc write $loadaddr 0 $blkcnt && \
  mmc dev 0 2 && mmc write $loadaddr 0 $blkcnt
# update entire $dev with compressed $image
update_all=\
  tftpboot $loadaddr $image && \
  gzwrite mmc $dev $loadaddr $filesize

# useful network boot commands (set bootargs/image before running)
#  if test -n "$fixfdt"; then echo "Adjusting FDT"; run fixfdt; fi &&
boot_net=\
  tftpboot $kernel_addr_r ${dir}/Image && \
  tftpboot $fdt_addr_r ${dir}/cn9130-malibu-${board}.dtb && \
  booti $kernel_addr_r - $fdt_addr_r
boot_net_itb=\
  tftpboot $kernel_addr_r ${dir}/kernel.itb && \
  tftpboot $fdt_addr_r ${dir}/cn9130-malibu-${board}.dtb && \
  bootm $kernel_addr_r - $fdt_addr_r
